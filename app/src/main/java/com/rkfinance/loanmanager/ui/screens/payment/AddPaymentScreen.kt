package com.rkfinance.loanmanager.ui.screens.payment

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AttachMoney
import androidx.compose.material.icons.filled.CalendarToday
import androidx.compose.material.icons.filled.Check
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusDirection
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.rkfinance.loanmanager.data.entities.Payment
import com.rkfinance.loanmanager.model.LoanDetails
import com.rkfinance.loanmanager.ui.screens.client.LuxTextField // Re-use
import com.rkfinance.loanmanager.ui.viewmodel.LoanViewModel
import com.rkfinance.loanmanager.ui.viewmodel.PaymentViewModel
import com.rkfinance.loanmanager.utils.formatCurrency
import com.rkfinance.loanmanager.utils.toFormattedDate
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddPaymentScreen(
    navController: NavController,
    paymentViewModel: PaymentViewModel = viewModel(),
    loanViewModel: LoanViewModel = viewModel(), // To display loan info
    loanId: Int
) {
    val focusManager = LocalFocusManager.current
    val coroutineScope = rememberCoroutineScope()
    val snackbarHostState = remember { SnackbarHostState() }

    var paymentAmount by remember { mutableStateOf("") }
    var paymentDate by remember { mutableStateOf(System.currentTimeMillis()) } // Default to today

    // Fetch loan details to display info, like outstanding balance
    LaunchedEffect(loanId) {
        loanViewModel.setSelectedLoanId(loanId) // Make sure this fetches details needed
        paymentViewModel.setLoanId(loanId) // Set loanId in paymentViewModel
    }
    val loanDetails by loanViewModel.selectedLoanDetails.collectAsState()


    Scaffold(
        modifier = Modifier
            .fillMaxSize()
            .background(MaterialTheme.colorScheme.background),
        snackbarHost = { SnackbarHost(snackbarHostState) },
        floatingActionButton = {
            FloatingActionButton(
                onClick = {
                    val amountDouble = paymentAmount.toDoubleOrNull()
                    if (amountDouble == null || amountDouble <= 0) {
                        coroutineScope.launch { snackbarHostState.showSnackbar("Invalid payment amount.") }
                        return@FloatingActionButton
                    }

                    val paymentToSave = Payment(
                        // paymentId is auto-generated by Room
                        loanId = loanId, // This should be correctly set from navigation
                        amount = amountDouble,
                        paymentDate = paymentDate
                    )
                    coroutineScope.launch {
                        paymentViewModel.insertPayment(paymentToSave)
                        navController.popBackStack()
                    }
                },
                containerColor = MaterialTheme.colorScheme.primary
            ) {
                Icon(
                    Icons.Filled.Check,
                    "Record Payment",
                    tint = MaterialTheme.colorScheme.onPrimary
                )
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .padding(paddingValues)
                .padding(16.dp)
                .fillMaxSize()
                .verticalScroll(rememberScrollState()),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                text = "Record New Payment",
                style = MaterialTheme.typography.headlineMedium,
                color = MaterialTheme.colorScheme.onBackground,
                modifier = Modifier.padding(bottom = 8.dp)
            )

            loanDetails?.let { details ->
                LoanInfoForPayment(details)
                Spacer(modifier = Modifier.height(8.dp))
            }

            LuxTextField(
                value = paymentAmount,
                onValueChange = { paymentAmount = it },
                label = "Payment Amount*",
                leadingIcon = Icons.Filled.AttachMoney,
                keyboardOptions = KeyboardOptions(
                    keyboardType = KeyboardType.Number,
                    imeAction = ImeAction.Next
                ),
                keyboardActions = KeyboardActions(onNext = { focusManager.moveFocus(FocusDirection.Down) })
            )

            // TODO: Implement a Date Picker for Payment Date
            OutlinedButton(
                onClick = { /* Open Date Picker for paymentDate */
                    coroutineScope.launch { snackbarHostState.showSnackbar("Date Picker for Payment Date to be implemented.") }
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Icon(
                    Icons.Filled.CalendarToday,
                    contentDescription = "Payment Date",
                    modifier = Modifier.padding(end = 8.dp)
                )
                Text("Payment Date: ${paymentDate.toFormattedDate()}")
            }
        }
    }
}

@Composable
fun LoanInfoForPayment(loanDetails: LoanDetails) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceColorAtElevation(
                1.dp
            )
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(4.dp)
        ) {
            Text(
                "For Loan ID: ${loanDetails.loan.loanId}",
                style = MaterialTheme.typography.titleMedium,
                color = MaterialTheme.colorScheme.onSurface
            )
            Divider(modifier = Modifier.padding(vertical = 4.dp))
            RowDetail(
                "Current Outstanding:",
                loanDetails.outstandingBalance.formatCurrency(),
                valueColor = MaterialTheme.colorScheme.primary
            )
            // You could add more relevant loan details here if needed
        }
    }
}